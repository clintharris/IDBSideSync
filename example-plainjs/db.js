const SHARED_SETTINGS = 'shared_settings';
const PROFILE_SETTINGS = 'profile_settings';
const PROFILES = 'profiles';
const TODO_TYPE_SYMLINKS = 'todo_type_symlinks';
const TODO_TYPES = 'todo_types';
const TODO_TYPES_BY_DELETED_INDEX = 'index_todo_types-deleted';
const TODO_ITEMS = 'todo_items';
const DELETED_PROP = 'deleted';
let db;

/**
 * Convenience function for getting a (cached/singleton) reference to an IndexedDB database via Promise. Mostly copied
 * from https://preview.tinyurl.com/yaoxc9cl).
 *
 * @returns a Promise that eventually resolves to the database.
 */
function getDB() {
  if (!db) {
    db = new Promise((resolve, reject) => {
      const openreq = indexedDB.open('todo-app', 1);

      openreq.onerror = () => {
        reject(openreq.error);
      };

      openreq.onupgradeneeded = (event) => {
        const db = event.target.result;
        IDBSideSync.onupgradeneeded(event);
        const todoTypeStore = db.createObjectStore(TODO_TYPES, { keyPath: 'id' });
        todoTypeStore.createIndex(TODO_TYPES_BY_DELETED_INDEX, DELETED_PROP, { unique: false });

        db.createObjectStore(TODO_ITEMS, { keyPath: 'id' });

        // The todo type "mappings" store maps the IDs of todo types to "current" type IDs. You can think of it as a
        // symbolic link or shortcut... The todo items each have a "type" field set to the key of a record in this
        // store. This store, in turn, has that key pointing to the ID of the actual todo type. So you might have
        // todos like `{ id: 'buy milk', type: 'symlinkKey1' }` and then have todo type symlink store that looks like
        // `{ symlinkKey1: 'todoTypeAAA', symlinkKey2: 'todoTypeBBB' }`.
        //
        // This extra degree of separation between the todos and the actual types is done so that when a todo type is
        // deleted and all of its todos are "migrated" to another type, we only need to update that mapping in a single
        // place instead of needing to update _all_ the todos that "belong" to the deleted type.
        //
        // Also, this is good excuse to test/demo an object store that does NOT have a keyPath. ðŸ˜‰
        db.createObjectStore(TODO_TYPE_SYMLINKS);

        // Create an object store used for "global" app settings that will be shared across devices if syncing is
        // enabled. This is an excuse to test/demo a store that doesn't have a keyPath. We'll stuff primitive values in
        // here (e.g., `put(123, 'someSetting')`).
        db.createObjectStore(SHARED_SETTINGS);

        // Create an object store used for the names of app profiles. This is an excuse to test/demo a store where the
        // key is a value specified by the user (vs. something like a uuid generated by the app). The interesting
        // scenario here is creating a profile with name "Foo" on one device, creating a profile with the same name on
        // another device, and then setting up syncing across devices.
        db.createObjectStore(PROFILES, { keyPath: 'name' });

        // Create an object store used for "per profile" settings that will be shared across devices if syncing is
        // enabled (e.g., a profile with a larger font size). This is an excuse to test/demo a store that has a
        // compound/composite keyPath (i.e., each object in the store is uniquely identified by a combination of values
        // for specific props).
        db.createObjectStore(PROFILE_SETTINGS, { keyPath: ['profileName', 'settingName'] });
      };

      openreq.onsuccess = () => {
        (async () => {
          await IDBSideSync.init(openreq.result);
          resolve(openreq.result);
        })();
      };
    });
  }
  return db;
}

/**
 * Convenience function for initiating an IndexedDB transaction and getting a reference to an object store. Mostly
 * copied from https://preview.tinyurl.com/yaoxc9cl). Makes it possible to use promise/async/await to "wait" for a
 * transaction to complete. Example:
 *
 * @example
 * ```
 * let result;
 *
 * // "Waits" until the entire transaction completes
 * await txWithStore('myStore', 'readwrite', (store) => {
 *   store.add(myThing).onsuccess = (event) => {
 *     result = event.target.result;
 *   }
 * });
 *
 * // Now do something else that may depend on the transaction having completed and 'myThing' having been added...
 * console.log('Your thing was added:', result);
 * ```
 *
 * @param {string} storeName - name of object store to retrieve
 * @param {string} mode - "readonly" | "readwrite"
 * @param {function} callback - will be called, with the object store as the first parameter.
 *
 * @returns a Promise that will resolve once the transaction completes successfully.
 */
async function txWithStore(storeName, mode, callback) {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transactionRequest = db.transaction([storeName, IDBSideSync.OPLOG_STORE], mode);
    transactionRequest.oncomplete = () => resolve();
    transactionRequest.onerror = () => reject(transactionRequest.error);

    // Note that the object store is immediately available (i.e., this is synchronous).
    const store = transactionRequest.objectStore(storeName);

    const proxiedStore = IDBSideSync.proxyStore(store);
    callback(proxiedStore);
  });
}

async function txWithStores(storeNames, mode, callback) {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transactionRequest = db.transaction([...storeNames, IDBSideSync.OPLOG_STORE], mode);
    transactionRequest.oncomplete = () => resolve();
    transactionRequest.onerror = () => reject(transactionRequest.error);

    // Note that the object stores are immediately available (i.e., this is synchronous).
    const stores = storeNames.map((name) => transactionRequest.objectStore(name));

    const proxiedStores = stores.map((store) => IDBSideSync.proxyStore(store));
    callback(...proxiedStores);
  });
}

async function addTodo(todo) {
  let req;
  await txWithStore(TODO_ITEMS, 'readwrite', (store) => {
    req = store.add({ id: IDBSideSync.uuid(), ...todo });
  });

  return req.result;
}

async function updateTodo(params, id) {
  let req;
  await txWithStore(TODO_ITEMS, 'readwrite', (store) => {
    req = store.put({ id, ...params });
  });

  return req.result;
}

function deleteTodo(id) {
  return updateTodo({ tombstone: 1 }, id);
}

function undeleteTodo(id) {
  return updateTodo({ tombstone: 0 }, id);
}

async function getAllTodos() {
  let req;
  await txWithStore(TODO_ITEMS, 'readonly', (store) => {
    req = store.getAll();
  });
  return req.result.filter((todo) => todo.tombstone !== 1);
}

async function getTodo(id) {
  let req;
  await txWithStore(TODO_ITEMS, 'readonly', (store) => {
    req = store.get(id);
  });
  return req.result;
}

async function getDeletedTodos() {
  let req;
  await txWithStore(TODO_ITEMS, 'readonly', (store) => {
    req = store.getAll();
  });
  return req.result.filter((todo) => todo.tombstone === 1);
}

async function getNumTodos() {
  let req;
  await txWithStore(TODO_ITEMS, 'readonly', (store) => {
    req = store.count();
  });
  return req.result;
}

async function getTodoTypes() {
  let req;
  await txWithStore(TODO_TYPES, 'readonly', (store) => {
    const index = store.index(TODO_TYPES_BY_DELETED_INDEX);
    req = index.getAll(IDBKeyRange.only(0));
  });
  return req.result;
}

async function addTodoType({ name, color }) {
  const typeId = IDBSideSync.uuid();
  await txWithStores([TODO_TYPES, TODO_TYPE_SYMLINKS], 'readwrite', (typeStore, typeSymlinkStore) => {
    typeStore.add({ id: typeId, name, color, [DELETED_PROP]: 0 });
    typeSymlinkStore.add(typeId, typeId); // symlink ID -> target ID. We can re-use the target ID at first.
    // TODO: the statement below is invalid and causes an error, which SHOULD cause the entire transaction to fail and
    // we should NOT see the typeStore successfully modified. But it works for some reason. Need to figure out why.
    // typeSymlinkStore.add({ symlinkId: typeId, targetId: typeId });
  });
  return typeId;
}

async function deleteTodoType(typeId, newTypeId) {
  await txWithStores([TODO_TYPES, TODO_TYPE_SYMLINKS], 'readwrite', (typeStore, typeSymlinkStore) => {
    // Update the type symlink to point to the new type
    if (newTypeId) {
      console.log(`Updating type symlink ${typeId} -> ${newTypeId}`);
      typeSymlinkStore.put(newTypeId, typeId);
    }

    // Now "delete" the todo type.
    typeStore.put({ id: typeId, [DELETED_PROP]: 1 });
  });
}

async function addProfileName(name) {
  let req;
  await txWithStore(PROFILES, 'readwrite', (store) => {
    req = store.add({ name });
  });
  return req.result;
}

async function getAllProfileNames() {
  let req;
  await txWithStore(PROFILES, 'readonly', (store) => {
    req = store.getAll();
  });
  return req.result;
}

async function getActiveProfileName() {
  let activeProfileName;
  await txWithStore(SHARED_SETTINGS, 'readonly', (store) => {
    const req = store.get('activeProfileName');
    req.onsuccess = (event) => {
      activeProfileName = req.result;
      console.log(`Found activeProfile: ${activeProfileName}`);
    };
  });
  return activeProfileName;
}

async function updateActiveProfileName(newValue) {
  await txWithStore(SHARED_SETTINGS, 'readwrite', (store) => {
    const req = store.put(newValue, 'activeProfileName');
    req.onsuccess = (event) => {
      console.log(`Saved new activeProfileName: ${newValue}`);
    };
  });
}

async function getBgColorSetting(profileName) {
  let bgColor;
  await txWithStore(PROFILE_SETTINGS, 'readonly', (store) => {
    const req = store.get([profileName, 'bgColor']);
    req.onsuccess = (event) => {
      bgColor = event.target.result ? event.target.result.value : 'white';
    };
  });
  return bgColor;
}

async function updateBgColorSetting(profileName, newValue) {
  await txWithStore(PROFILE_SETTINGS, 'readwrite', (store) => {
    const req = store.put({ profileName, settingName: 'bgColor', value: newValue });
    req.onsuccess = (event) => {
      console.log('Successfully persisted new bgColor', event.target.result);
    };
  });
  // printOpLog();
}

async function getFontSizeSetting(profileName) {
  let fontSize;
  await txWithStore(PROFILE_SETTINGS, 'readonly', (store) => {
    const req = store.get([profileName, 'fontSize']);
    req.onsuccess = (event) => {
      fontSize = event.target.result ? event.target.result.value : 16;
    };
  });
  return fontSize;
}

async function updateFontSizeSetting(profileName, newValue) {
  await txWithStore(PROFILE_SETTINGS, 'readwrite', (store) => {
    const req = store.put({ profileName, settingName: 'fontSize', value: newValue });
    req.onsuccess = (event) => {
      console.log('Successfully persisted new fontSize', event.target.result);
    };
  });
  // printOpLog();
}

async function printOpLog() {
  txWithStore(IDBSideSync.OPLOG_STORE, 'readonly', (store) => {
    const req = store.getAll();
    req.onsuccess = (event) => {
      console.log('Updated oplog store (how is it sorted?):', event.target.result);
    };
  });
}
